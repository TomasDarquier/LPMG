services:
  db:
    image: postgres:13
    container_name: postgres_container
    environment:
      POSTGRES_USER: tfgusername
      POSTGRES_PASSWORD: tfgpassword
      POSTGRES_DB: usersdb
    volumes:
      - ./postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - microservices-network

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "22181:2181"
      - "22182:2182"
    networks:
      - microservices-network

  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: kafka
    ports:
      - "9092:9092"
      - "9093:9093"
    depends_on:
      - zookeeper
    environment:
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1 #replicas
      KAFKA_HEAP_OPTS: -Xmx1G -Xms1G
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092,SSL://localhost:9093 #ubicacion del broker
      KAFKA_SSL_CLIENT_AUTH: 'required'
      KAFKA_SSL_KEYSTORE_FILENAME: '/certs/kafka.testbroker.keystore.jks'
      KAFKA_SSL_KEYSTORE_CREDENTIALS: pass
      KAFKA_SSL_KEY_CREDENTIALS: pass
      KAFKA_SSL_TRUSTSTORE_FILENAME: '/certs/kafka.testbroker.truststore.jks'
      KAFKA_SSL_TRUSTSTORE_CREDENTIALS: pass
    volumes:
      - ./kafka/certs/test/kafka.testbroker.keystore.jks:/etc/kafka/secrets/certs/kafka.testbroker.keystore.jks
      - ./kafka/certs/test/kafka.testbroker.truststore.jks:/etc/kafka/secrets/certs/kafka.testbroker.truststore.jks
      - ./kafka/credentials/test/pass:/etc/kafka/secrets/pass
    networks:
      - microservices-network

  minio:
    image: bitnami/minio:latest
    ports:
      - '9000:9000'
      - '9001:9001'
    environment:
      MINIO_ROOT_USER: tfgusername
      MINIO_ROOT_PASSWORD: tfgpassword
      MINIO_DEFAULT_BUCKETS: projects
#    volumes:
#      - /minio:/bitnami/minio/data
    networks:
      - microservices-network

networks:
  microservices-network:
    driver: bridge

volumes:
  pgdata:
  minio_data:
    driver: local
