import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Assertions.*;

import ${package}.entities.Order;
import ${package}.services.OrderService;
import ${package}.controllers.OrderController;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

import java.util.Arrays;
import java.util.List;

class OrderServiceTests {

    @Mock
    private OrderService orderService;

    @InjectMocks
    private OrderController orderController;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    void testGetAllOrders() {
        List<Order> orders = Arrays.asList(new Order(1L, null, "Order1", 100.0f, 2.0f));
        when(orderService.getOrders()).thenReturn(orders);

        List<Order> result = orderController.getOrders();
        assertEquals(1, result.size());
        assertEquals("Order1", result.get(0).getOrderName());
    }

    @Test
    void testGetOrderById() {
        Order order = new Order(1L, null, "Order1", 100.0f, 2.0f);
        when(orderService.getOrder(1L)).thenReturn(order);

        Order result = orderController.getOrder(1L);
        assertEquals("Order1", result.getOrderName());
    }

    @Test
    void testCreateOrder() {
        Order order = new Order(1L, null, "Order1", 100.0f, 2.0f);
        when(orderService.createOrder(order)).thenReturn(order);

        Order result = orderController.createOrder(order);
        assertEquals("Order1", result.getOrderName());
    }

    @Test
    void testUpdateOrder() {
        Order order = new Order(1L, null, "UpdatedOrder", 150.0f, 3.0f);
        when(orderService.updateOrder(any(Order.class))).thenReturn(order);

        Order result = orderController.updateOrder(order);
        assertEquals("UpdatedOrder", result.getOrderName());
    }

    @Test
    void testDeleteOrder() {
        doNothing().when(orderService).deleteOrder(1L);

        assertDoesNotThrow(() -> orderController.deleteOrder(1L));
    }
}
